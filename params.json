{"name":"lungo-angular-bridge","tagline":"Joining the joys that are Lungo and Angular together into an integrated mobile solution that you'll love","body":"Lungo Angular Bridge\r\n====\r\nLinking [Lungo](http://lungo.tapquo.com) to [Angular](http://angularjs.org) to bring you mobile awesomeness\r\n\r\n#### What is Lungo?\r\n\r\n[Lungo](http://lungo.tapquo.com), created by the geniuses at [Tapquo](http://www.tapquo.com), is an awesome mobile framework that, in the words of one Centralway JS expert, is \"better than native\" when it comes to building mobile applications.\r\n\r\nHere at [Centralway](http://www.centralway.com) we tried many, many different options (Calatrava, Titanium, the m-project, etc.) and only found one - Lungo - that gave the user experience that we feel our users deserve.\r\n\r\n#### What is Angular?\r\n\r\nAngular provides MVC on steriods. As you're more likely to have heard of Angular, please check out their page - http://angularjs.org for more info!\r\n\r\n## Things to know before you start\r\n\r\nLungo and Angular both have some common concepts and therefore have some cross-over in the functionality provided. The bridge views Angular's functionality as being more advanced and so it tends to favour Angular over Lungo. \r\n\r\n#### Open issues\r\n\r\nThere are lots of issues in our github project, however issue != bug. We like issues, we like to keep track of ideas, things that could be done, questions, etc. So you'll find quite a few issues. If you're interested in contributing, there would be somewhere to look first\r\n\r\n#### Routing\r\n\r\nBoth Angular and Lungo have the concept of 'routing'. In Lungo, 'routing' is used to provide navigation between sections, articles and asides. In Angular, routing is a much more powerful beast, more like rails. \r\n\r\nThe Bridge favours Angular's routes; in fact, the majority of the work has been spent on making Angular's routes work well within Lungo. Lungo's \"routing\" should not be used apart from in **one** case: asides (these are facebook-like side menus that pop out). \r\n\r\nTo toggle the display of an aise, please use the following call:\r\n\r\n    Lungo.Router.aside([section id], [aside id]);\r\n    \r\nWe typically choose to bind it in an ng-click attribute.\r\n\r\n#### Services\r\n\r\nBoth Angular and Lungo have the concept of 'services'. We tend to favour Angular services over Lungo services. \r\n\r\n#### Application delivery\r\n\r\nTapquo, Lungo's creators, favour delivering mobile apps as mobile web applications. At Centralway, we love that. But we also love deploying our apps as if they were \"native\" mobile applications, so we aim to support that too. So if Phonegap is your thing, you'll probably want to look around here.\r\n\r\n#### DOM access\r\n\r\nAngular relies on a jQuery-like API to modify the browser's DOM. If jQuery is not available, then it uses a built-in jqLite that does something very similar.\r\n\r\nLungo is built upon Quo.js, a mobile-focussed DOM manipulation API (also built by the guys at Tapquo). \r\n\r\nWe would try to favour Quo.js to keep things consisent, however we are not consistentin this. We do have an open issue to create a jQuery-like wrapper for Quo.js and make Angular use that - but we're not there yet.\r\n\r\n## Getting Started\r\n\r\n### A few Lungo concepts\r\n\r\nBefore you begin, it's a good idea to familiarise yourself with 3 key Lungo concepts (which are also tags):\r\n\r\n1. section\r\n2. article\r\n3. aside\r\n\r\nThese are best shown in this simple example:\r\n\r\n    <body class=\"app\">\r\n        <section id=\"main\" data-transition=\"\">\r\n            <article id=\"main-article\" class=\"active\">\r\n                <strong>This is some text</strong>\r\n                <a ng-click=\"showAside()\">Show aside</a>\r\n            </article>\r\n        </section>\r\n        <aside id=\"mainAside\">\r\n            <strong>This is my aside</strong>\r\n        </aside>\r\n        <!-- Angular, Lungo and Bridge code not shown -->\r\n    </body>\r\n\r\nSections are essentially containers for articles. They can also contain a header and footer tags for, well, headers and footers.\r\n\r\nArticles contain content that is to be displayed.\r\n\r\nAsides are essentially side-menus that can pop out from the left or the right of the screen.\r\n\r\nTo play around with Lungo concepts, you can use their excellent [prototyping](http://lungo.tapquo.com/howto/prototype/) documentation to build up some templates. You can, more-or-less, take prototyped Lungo code and build Angular functionality in using the bridge.\r\n\r\n### Installation\r\n\r\nThe Bridge is a Bower package, so you just need to install Bower - \r\n\r\n    npm install bower -g\r\n\r\nHaving done that, your next step is\r\n\r\n    bower install git@github.com:centralway/lungo-angular-bridge.git\r\n\r\nNext, reference the Bridge source file after Lungo & Angular has been referenced:\r\n\r\n    <script type=\"text/javascript\" src=\"../src/lungo-angular-bridge.js\"></script>\r\n\r\nTo get lab-view functionality we'll need to list the Bridge as a dependency:\r\n\r\n    angular.module('BridgeExample', ['Centralway.lungo-angular-bridge', 'BridgeExample.filters']).\r\n\r\nFor the moment, until lab-router is implemented, you need to have one controller call the routing class like so\r\n\r\n    function AppCtrl($scope, $location) {\r\n        AppRouter.instance = AppRouter(Lungo, $location, $scope);\r\n\r\nIf you want to use ng-view, then you'll need to use the Bridge's own implementation instead, lab-view and it must be declared as a child of the body element.\r\n\r\n    <body>\r\n        <lab-view></lab-view>\r\n\r\n### Usage\r\n\r\nLungo imposes a section/article constraint on URLs. It expects all URLs to be in the following format:\r\n\r\n    /[section id](/[article id](/... other params))\r\n    \r\nSome examples:\r\n\r\n+ /dashboard => section id='dashboard'\r\n+ /dashboard/some_article => section id='dashboard' - article id='some_article'\r\n+ /dashboard/some_article/confirm => section id='dashboard' - article id='some_article'\r\n\r\n## Examples\r\n\r\nFor the moment, run python -m SimpleHTTPServer from within the root of the repository.\r\n\r\nSooner or later we'll add a node.js server to handle things a litle nicer.\r\n\r\n### Available examples: \r\n\r\nYou'll find all the following examples within the 'examples' directory (surprise).\r\n\r\n#### 'simple' example\r\n\r\nThis is more of a kitchen sink demo, used also by our test suite. Here we try to demonstrate using the functionality of both Angular & Lungo together at the same time.\r\n\r\n#### Todo example\r\n\r\nThis takes the simple todo example from Angular's front page and puts it into a Lungo application, adding Lungo/mobile features along the way.\r\n\r\n#### Photomap examples - Phonegap awesomeness\r\n\r\nThis example demonstrates accessing aspects of a mobile device to provide a native experience using mapping, geolocation and accessing the device's camera.\r\n\r\n## Tests\r\n\r\nIn order to run the tests, we are using [Testacular](http://vojtajina.github.com/testacular/). We have two kind of tests, [unit tests](http://docs.angularjs.org/guide/dev_guide.unit-testing) and [end-2-end](http://docs.angularjs.org/guide/dev_guide.e2e-testing) tests.\r\n\r\nYou need a version of v0.8.4+ and the latest stable version of Testacular (0.5.9).\r\n\r\n    npm install -g testacular@0.5.9\r\n\r\n### End-2-End Tests\r\n\r\nThis tests are as effective as browsers we can use in order to ensure the proper DOM manipulation is being performed. To setup proper configuration for this tests, review the `config/testacular-e2e.conf.js` file.\r\n\r\n*Start Web Browser*\r\nStart the web browser (a simple wrapper for Python -m SimpleHTTPServer)\r\n\r\n    ./scripts/web-server.sh\r\n\r\n*Start Testacular Server*\r\nIt will watch your tests and pop as many browsers as you want to test in order to ensure compatibility. In the future we can put PhantomJS for headless tests for CI\r\n\r\n    ./scripts/e2e-test.sh\r\n\r\n*Sample tests*\r\nE2E Tests are located in `test/e2e`.\r\n\r\n### Unit tests\r\n\r\nThese are to test specific parts of the Bridge outside of the web browser environment. Things that should be tested:\r\n\r\n * directives\r\n * modules\r\n * classes\r\n * controllers (if any!)\r\n\r\nThe unit test configuration (`config/testacular-unit.conf.js`) includes the following:\r\n\r\n1. angular\r\n2. angular mocks\r\n3. quo (debug version)\r\n4. lungo (debug version)\r\n\r\n*Running tests*\r\nYour friend is:\r\n\r\n    ./scripts/unit-test.sh\r\n\r\n\r\n## Credits\r\n\r\nCopyright (c) 2013 by Centralway Factory AG.\r\n\r\n## Licensing Options\r\nLungo is licensed under free commercial and open source licenses for\r\napplication development, and a paid commercial license for OEM uses.\r\n\r\nSee LICENSE.txt for license.\r\n","google":"UA-30047495-3","note":"Don't delete this file! It's used internally to help with page regeneration."}